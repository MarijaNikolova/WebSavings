openapi: 3.0.2
info:
  title: "API for the Web Savings calculator"
  version: 1.0.0

  description: |
    API for the Web Savings Calculator which contains the logic required for the calculator to work.

    Modules:
      - getConfigData
      - saveConfigData
      - getCustomerData
      - saveCustomerData

    For further detailed information read the external documentation todo ADD EXTERNAL LINK

  contact:
    name: developers
    email: marijanikolova93@hotmail.com

servers:
  - url: "/"
paths:
  "/config-data":
    get:
      tags:
        - Config data
      summary: >-
        Retrieves saved config data for the given client.
      operationId: getConfigData
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        200:
          description: >-
            The request was successful, the config data was retrieved.
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/ConfigData"
    put:
      tags:
        - Config data
      summary: >-
        Saves the given config data for the client.
      operationId: saveConfigData
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/ConfigData"
        required: true
      responses:
        204:
          description: "The content for config data was saved, please retrieve it."
  "/customer":
    get:
      tags:
        - Customer
      summary: >-
        Retrieves the customer data for the given email.
      operationId: getCustomerData
      parameters:
        - $ref: "#/components/parameters/CustomerEmail"
        - $ref: "#/components/parameters/CustomerPassword"
      responses:
        200:
          description: >-
            The request was successful, the customer data is retrieved.
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/CustomerData"
    put:
      tags:
        - Customer
      summary: "Saves the customer data for the given client."
      operationId: saveCustomerData
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/CustomerData"
        required: true
      responses:
        200:
          description: "The content for config data was saved, please retrieve it."
  "/cashflows":
    get:
      tags:
        - CashFlows
      summary: >-
        Retrieves all cash flows for the given customer
      operationId: getCashFlows
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      responses:
        200:
          description: >-
            Retrieves all cash flows for the given client
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CashFlow"
    put:
      tags:
         - CashFlows
      summary: >-
        Saves the cash flow for the given customer
      operationId: saveCashFlow
      parameters:
        - $ref: "#/components/parameters/CustomerId"
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: "#/components/schemas/CashFlow"
        required: true
      responses:
        200:
          description: "The content for config data was saved, please retrieve it."

components:
  schemas:
    ConfigData:
      type: object
      properties:
        numberOfYears:
          type: integer
          description: >-
            Number of years for which the duration of the plan should be calculated.
          example: 12
        language:
          type: string
          description: >-
            The language in which the client wants to see the application (MK or EN)
          example: 'EN'
    CustomerData:
      type: object
      properties:
        surname:
          type: string
          description: "The surname of the client"
          example: "Smith"
        name:
          type: string
          description: "The name of the client"
          example: "John"
        email:
          type: string
          format: email
          description: "The email of the client"
          example: "john@somewhere.com"
        dateOfBirth:
          type: string
          format: date
          description: "The date of birth of the client"
          example: "01.01.1966"
        id:
          type: integer
          description: "The id of the client"
          example: 1
        password:
          type: string
          description: "The password of the client"
          example: "pass123"
    CashFlow:
      type: object
      properties:
        id:
          type: integer
          description: "The id of the cash flow"
          example: 1
        value:
          type: number
          description: "The value of the cash flow"
          example: 30.0
        currency:
          type: string
          description: "The currency of the cash flow"
          example: 'CHF'
        occurenceType:
          type: string
          enum:
            - RECURRING
            - ONE-TIME
          description: "The occurrence of the cash flow"
          example: "RECURRING"
        description:
          type: string
          description: "The description of the cash flow"
          example: "Income from house rent"
        category:
          type: string
          description: "The category of the cash flow"
          example: "Mortgages"
        type:
          type: string
          enum:
            - INCOME
            - EXPENSE
          description: "The type of the cash flow - income or expense"
          example: "income"
        dateFrom:
          type: string
          format: date
          description: "The to date for the cash flow"
          example: "2021-01-01"
        dateTo:
          type: string
          format: date
          description: "The to date for the cash flow"
          example: "2021-01-01"

  parameters:
    CustomerId:
      name: customerId
      description: '`The customer id.'
      in: query
      required: true
      example: 1
      schema:
        type: integer
        x-data-class-category: d-non-sensitive-identifier
    CustomerEmail:
      name: customerEmail
      description: 'The customer email.'
      in: query
      required: true
      example: marija@gmail.com
      schema:
        type: string
    CustomerPassword:
      name: customerPassword
      description: "The customer password"
      in: query
      required: true
      example: pase434
      schema:
        type: string


